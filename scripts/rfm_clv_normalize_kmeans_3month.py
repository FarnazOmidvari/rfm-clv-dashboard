# -*- coding: utf-8 -*-
"""rfm_clv_normalize_kmeans_3Month.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GY-oliQAyf85ey3jVkBIunl_thxRPoeh
"""

import pandas as pd
import numpy as np
import sklearn.preprocessing as pp
import datetime as dt
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt

"""## Read CSV File"""

df = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/GoalEarn/Prj-8/GitHub/online_retail_cleaningdata.csv')

df.head()

df.info()

df['date'] = pd.to_datetime(df['date'])

df.info()

last_date = df['date'].max()
last_date



first_date = df['date'].min()
first_date

three_months_ago = last_date - pd.DateOffset(months=3)
three_months_ago



df_last_3month = df[df['date'] >= three_months_ago]
df_last_3month



rfm_last_3month = (df_last_3month.groupby('customer_id').agg(
                                        recency = ('date' , lambda x: (last_date - x.max()).days),
                                        frequency = ('invoice_id' , 'nunique'),
                                        monetary = ('sales' , 'sum')).reset_index())

rfm_last_3month

"""## **CLV = AOV * Purchase Frequency * Customer Lifespan**

**AOV (Average Order Value)**
"""

rfm_last_3month['aov'] = (rfm_last_3month['monetary'] / rfm_last_3month['frequency']).clip(lower=1)
rfm_last_3month

rfm_last_3month['purchase_freq'] = rfm_last_3month['frequency']
rfm_last_3month



n per

"""**Lifespan per Months**"""

rfm_last_3month['lifespn_per_month'] = (rfm_last_3month['recency'] / 30).clip(lower=1)
rfm_last_3month

"""**Lifespan = The Mean of All Recencies**"""

avg_recency = rfm_last_3month['recency'].mean()

avg_lifespn = avg_recency / 30

rfm_last_3month['lifespn_avg'] = avg_lifespn
rfm_last_3month

rfm_last_3month['clv_lifesp_m'] = (
                            rfm_last_3month['aov'] *
                            rfm_last_3month['purchase_freq']*
                            rfm_last_3month['lifespn_per_month']
)

rfm_last_3month['clv_lifesp_avg'] = (
                            rfm_last_3month['aov'] *
                            rfm_last_3month['purchase_freq']*
                            rfm_last_3month['lifespn_avg']
)

rfm_last_3month

rfm_last_3month.to_csv('/content/drive/MyDrive/ColabNotebooks/GoalEarn/Prj-8/GitHub/rfm_clv_3month_RealData.csv')

rfm_last_3month.to_excel('/content/drive/MyDrive/ColabNotebooks/GoalEarn/Prj-8/GitHub/rfm_clv_3month_RealData.xlsx')

plt.figure(figsize=(18,8))

# Recency vs Frequency
plt.subplot(2, 3, 1)
plt.scatter(rfm_last_3month['recency'], rfm_last_3month['frequency'], color='green', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Frequency')
plt.title('Recency vs Frequency')

# Recency vs Monetary
plt.subplot(2, 3, 2)
plt.scatter(rfm_last_3month['recency'], rfm_last_3month['monetary'], color='blue', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.title('Recency vs Monetary')

# Frequency vs Monetary
plt.subplot(2, 3, 3)
plt.scatter(rfm_last_3month['frequency'], rfm_last_3month['monetary'], color='red', alpha=0.5)
plt.xlabel('Frequency')
plt.ylabel('Monetary')
plt.title('Frequency vs Monetary')

# recency vs clv_lifesp_avg
plt.subplot(2, 3, 4)
plt.scatter(rfm_last_3month['clv_lifesp_avg'], rfm_last_3month['recency'], color='green', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('recency')
plt.title('Scatter Plot - recency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 5)
plt.scatter(rfm_last_3month['clv_lifesp_avg'], rfm_last_3month['frequency'], color='blue', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Frequency')
plt.title('Scatter Plot - Frequency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 6)
plt.scatter(rfm_last_3month['clv_lifesp_avg'], rfm_last_3month['monetary'], color='red', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Monetary')
plt.title('Scatter Plot - Monetary vs clv_lifesp_avg')



plt.tight_layout()
plt.show()

"""## Normalization,Standardization"""

relevant_cols = ['recency' , 'frequency' , 'monetary' , 'clv_lifesp_m' , 'clv_lifesp_avg']

rfm_clv = rfm_last_3month[relevant_cols]
rfm_clv.head()

"""### MinMax Normalization"""

scaler1 = pp.MinMaxScaler()
minmax_sclr = scaler1.fit_transform(rfm_clv)

minmax_sclr

# Array to DataFrame

minmax_df = pd.DataFrame(minmax_sclr, columns=relevant_cols)
minmax_df.head()

plt.figure(figsize=(18,8))

# Recency vs Frequency
plt.subplot(2, 3, 1)
plt.scatter(minmax_df['recency'], minmax_df['frequency'], color='green', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Frequency')
plt.title('Recency vs Frequency')

# Recency vs Monetary
plt.subplot(2, 3, 2)
plt.scatter(minmax_df['recency'], minmax_df['monetary'], color='blue', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.title('Recency vs Monetary')

# Frequency vs Monetary
plt.subplot(2, 3, 3)
plt.scatter(minmax_df['frequency'], minmax_df['monetary'], color='red', alpha=0.5)
plt.xlabel('Frequency')
plt.ylabel('Monetary')
plt.title('Frequency vs Monetary')

# recency vs clv_lifesp_avg
plt.subplot(2, 3, 4)
plt.scatter(minmax_df['clv_lifesp_avg'], minmax_df['recency'], color='green', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('recency')
plt.title('Scatter Plot - recency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 5)
plt.scatter(minmax_df['clv_lifesp_avg'], minmax_df['frequency'], color='blue', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Frequency')
plt.title('Scatter Plot - Frequency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 6)
plt.scatter(minmax_df['clv_lifesp_avg'], minmax_df['monetary'], color='red', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Monetary')
plt.title('Scatter Plot - Monetary vs clv_lifesp_avg')



plt.tight_layout()
plt.show()

"""### Standard Normalization"""

scaler2 = pp.StandardScaler()
std_sclr = scaler2.fit_transform(rfm_clv)

std_sclr

# Array to DataFrame

std_df = pd.DataFrame(std_sclr , columns=relevant_cols)
std_df.head()

plt.figure(figsize=(18,8))

# Recency vs Frequency
plt.subplot(2, 3, 1)
plt.scatter(std_df['recency'], std_df['frequency'], color='green', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Frequency')
plt.title('Recency vs Frequency')

# Recency vs Monetary
plt.subplot(2, 3, 2)
plt.scatter(std_df['recency'], std_df['monetary'], color='blue', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.title('Recency vs Monetary')

# Frequency vs Monetary
plt.subplot(2, 3, 3)
plt.scatter(std_df['frequency'], std_df['monetary'], color='red', alpha=0.5)
plt.xlabel('Frequency')
plt.ylabel('Monetary')
plt.title('Frequency vs Monetary')

# recency vs clv_lifesp_avg
plt.subplot(2, 3, 4)
plt.scatter(std_df['clv_lifesp_avg'], std_df['recency'], color='green', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('recency')
plt.title('Scatter Plot - recency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 5)
plt.scatter(std_df['clv_lifesp_avg'], std_df['frequency'], color='blue', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Frequency')
plt.title('Scatter Plot - Frequency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 6)
plt.scatter(std_df['clv_lifesp_avg'], std_df['monetary'], color='red', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Monetary')
plt.title('Scatter Plot - Monetary vs clv_lifesp_avg')



plt.tight_layout()
plt.show()

"""### Robust Normalization"""

scaler3 = pp.RobustScaler()
robust_sclr = scaler3.fit_transform(rfm_clv)

robust_sclr

# Array to DataFrame

robust_df = pd.DataFrame(robust_sclr , columns=relevant_cols)
robust_df.head()

plt.figure(figsize=(18,8))

# Recency vs Frequency
plt.subplot(2, 3, 1)
plt.scatter(robust_df['recency'], robust_df['frequency'], color='green', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Frequency')
plt.title('Recency vs Frequency')

# Recency vs Monetary
plt.subplot(2, 3, 2)
plt.scatter(robust_df['recency'], robust_df['monetary'], color='blue', alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.title('Recency vs Monetary')

# Frequency vs Monetary
plt.subplot(2, 3, 3)
plt.scatter(robust_df['frequency'], robust_df['monetary'], color='red', alpha=0.5)
plt.xlabel('Frequency')
plt.ylabel('Monetary')
plt.title('Frequency vs Monetary')

# recency vs clv_lifesp_avg
plt.subplot(2, 3, 4)
plt.scatter(robust_df['clv_lifesp_avg'], robust_df['recency'], color='green', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('recency')
plt.title('Scatter Plot - recency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 5)
plt.scatter(robust_df['clv_lifesp_avg'], robust_df['frequency'], color='blue', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Frequency')
plt.title('Scatter Plot - Frequency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 6)
plt.scatter(robust_df['clv_lifesp_avg'], robust_df['monetary'], color='red', alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Monetary')
plt.title('Scatter Plot - Monetary vs clv_lifesp_avg')



plt.tight_layout()
plt.show()

"""## Clustering - KMeans - ElbowPlot"""

def find_best_clusters(df, maximum_K):

    clusters_centers = []
    k_values = []

    for k in range(1, maximum_K):

        kmeans_model = KMeans(n_clusters = k)
        kmeans_model.fit(df)

        clusters_centers.append(kmeans_model.inertia_)
        k_values.append(k)


    return clusters_centers, k_values

def generate_elbow_plot(clusters_centers, k_values):

    figure = plt.subplots(figsize = (12, 6))
    plt.plot(k_values, clusters_centers, 'o-', color = 'orange')
    plt.xlabel("Number of Clusters (K)")
    plt.ylabel("Cluster Inertia")
    plt.title("Elbow Plot of KMeans")
    plt.show()

clusters_centers, k_values = find_best_clusters(std_sclr, 18)

generate_elbow_plot(clusters_centers, k_values)

kmeans_model = KMeans(n_clusters = 5)
kmeans_model.fit(std_sclr)

std_df["clusters"] = kmeans_model.labels_
std_df.head()

plt.figure(figsize=(18,8))

# Recency vs Frequency
plt.subplot(2, 3, 1)
plt.scatter(std_df['recency'], std_df['frequency'],c = std_df['clusters'] , alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Frequency')
plt.title('Recency vs Frequency')

# Recency vs Monetary
plt.subplot(2, 3, 2)
plt.scatter(std_df['recency'], std_df['monetary'], c = std_df['clusters'], alpha=0.5)
plt.xlabel('Recency')
plt.ylabel('Monetary')
plt.title('Recency vs Monetary')

# Frequency vs Monetary
plt.subplot(2, 3, 3)
plt.scatter(std_df['frequency'], std_df['monetary'], c = std_df['clusters'], alpha=0.5)
plt.xlabel('Frequency')
plt.ylabel('Monetary')
plt.title('Frequency vs Monetary')

# recency vs clv_lifesp_avg
plt.subplot(2, 3, 4)
plt.scatter(std_df['clv_lifesp_avg'], std_df['recency'], c = std_df['clusters'] , alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('recency')
plt.title('Scatter Plot - recency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 5)
plt.scatter(std_df['clv_lifesp_avg'], std_df['frequency'], c = std_df['clusters'] , alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Frequency')
plt.title('Scatter Plot - Frequency vs clv_lifesp_avg')

# Frequency vs clv_lifesp_avg
plt.subplot(2, 3, 6)
plt.scatter(std_df['clv_lifesp_avg'], std_df['monetary'], c = std_df['clusters'] , alpha=0.6)
plt.xlabel('clv_lifesp_avg')
plt.ylabel('Monetary')
plt.title('Scatter Plot - Monetary vs clv_lifesp_avg')



plt.tight_layout()
plt.show()

std_df['customer_id'] = rfm_last_3month['customer_id'].values

std_df.head()

clusters_mean = std_df.groupby('clusters').agg(
                                                avg_recency = ('recency' , 'mean'),
                                                avg_frequency = ('frequency','mean'),
                                                avg_monetary = ('monetary','mean'),
                                                avg_clv_lifesp_m = ('clv_lifesp_m','mean'),
                                                avg_clv_lifesp_avg = ('clv_lifesp_avg','mean'),
                                                customers_count = ('customer_id' , 'count')

).reset_index()

clusters_mean

std_df.to_csv('RFM_CLV&RFM_3Month.csv')

std_df.to_excel('RFM_CLV&RFM_3Month.xlsx')

clusters_mean.to_csv('RFM_CLV&RFM_3Month_mean.csv')

clusters_mean.to_excel('RFM_CLV&RFM_3Month_mean.xlsx')

